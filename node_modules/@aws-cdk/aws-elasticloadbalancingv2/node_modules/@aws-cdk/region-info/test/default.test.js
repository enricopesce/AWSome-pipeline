"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const region = 'bermuda-triangle-42';
const urlSuffix = '.nowhere.null';
describe('servicePrincipal', () => {
    for (const suffix of ['', '.amazonaws.com', '.amazonaws.com.cn']) {
        for (const service of ['states']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.${region}.amazonaws.com`);
            });
        }
        for (const service of ['codedeploy', 'logs']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.${region}.${urlSuffix}`);
            });
        }
        for (const service of ['ec2']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.${urlSuffix}`);
            });
        }
        for (const service of ['autoscaling', 'lambda', 'events', 'sns', 'sqs', 'foo-service']) {
            test(`${service}${suffix}`, () => {
                expect(lib_1.Default.servicePrincipal(`${service}${suffix}`, region, urlSuffix)).toBe(`${service}.amazonaws.com`);
            });
        }
    }
    test('with an "exotic" DNS suffix (.local)', () => {
        expect(lib_1.Default.servicePrincipal('foo-service.local', region, urlSuffix)).toBe('foo-service.local');
    });
    test('Exceptions: states in us-iso-east-1', () => {
        expect(lib_1.Default.servicePrincipal('states.amazonaws.com', 'us-iso-east-1', 'c2s.ic.gov')).toBe('states.amazonaws.com');
    });
    test('Exceptions: states in us-isob-east-1', () => {
        expect(lib_1.Default.servicePrincipal('states.amazonaws.com', 'us-isob-east-1', 'sc2s.sgov.gov')).toBe('states.amazonaws.com');
    });
    for (const service of ['cloudhsm', 'config', 'workspaces']) {
        test(`Exceptions: ${service}.amazonaws.com is us-iso-east-1`, () => {
            expect(lib_1.Default.servicePrincipal(`${service}.amazonaws.com`, 'us-iso-east-1', 'c2s.ic.gov')).toBe(`${service}.c2s.ic.gov`);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVmYXVsdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQWlDO0FBRWpDLE1BQU0sTUFBTSxHQUFHLHFCQUFxQixDQUFDO0FBQ3JDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQztBQUVsQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUMsRUFBRTtRQUNoRSxLQUFLLE1BQU0sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLGFBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3hILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxLQUFLLE1BQU0sT0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxhQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxPQUFPLEdBQUcsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxJQUFJLE1BQU0sSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxLQUFLLE1BQU0sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLGFBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQztZQUM3RyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsS0FBSyxNQUFNLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLEVBQUU7WUFDdEYsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLGFBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLGdCQUFnQixDQUFDLENBQUM7WUFDOUcsQ0FBQyxDQUFDLENBQUM7U0FDSjtLQUVGO0lBRUQsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtRQUNoRCxNQUFNLENBQUMsYUFBTyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3JHLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtRQUMvQyxNQUFNLENBQUMsYUFBTyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixFQUFFLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3ZILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtRQUNoRCxNQUFNLENBQUMsYUFBTyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDM0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxLQUFLLE1BQU0sT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsRUFBRTtRQUMxRCxJQUFJLENBQUMsZUFBZSxPQUFPLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtZQUNqRSxNQUFNLENBQUMsYUFBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsT0FBTyxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLGFBQWEsQ0FBQyxDQUFDO1FBQzVILENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlZmF1bHQgfSBmcm9tICcuLi9saWInO1xuXG5jb25zdCByZWdpb24gPSAnYmVybXVkYS10cmlhbmdsZS00Mic7XG5jb25zdCB1cmxTdWZmaXggPSAnLm5vd2hlcmUubnVsbCc7XG5cbmRlc2NyaWJlKCdzZXJ2aWNlUHJpbmNpcGFsJywgKCkgPT4ge1xuICBmb3IgKGNvbnN0IHN1ZmZpeCBvZiBbJycsICcuYW1hem9uYXdzLmNvbScsICcuYW1hem9uYXdzLmNvbS5jbiddKSB7XG4gICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIFsnc3RhdGVzJ10pIHtcbiAgICAgIHRlc3QoYCR7c2VydmljZX0ke3N1ZmZpeH1gLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChEZWZhdWx0LnNlcnZpY2VQcmluY2lwYWwoYCR7c2VydmljZX0ke3N1ZmZpeH1gLCByZWdpb24sIHVybFN1ZmZpeCkpLnRvQmUoYCR7c2VydmljZX0uJHtyZWdpb259LmFtYXpvbmF3cy5jb21gKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgWydjb2RlZGVwbG95JywgJ2xvZ3MnXSkge1xuICAgICAgdGVzdChgJHtzZXJ2aWNlfSR7c3VmZml4fWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KERlZmF1bHQuc2VydmljZVByaW5jaXBhbChgJHtzZXJ2aWNlfSR7c3VmZml4fWAsIHJlZ2lvbiwgdXJsU3VmZml4KSkudG9CZShgJHtzZXJ2aWNlfS4ke3JlZ2lvbn0uJHt1cmxTdWZmaXh9YCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgWydlYzInXSkge1xuICAgICAgdGVzdChgJHtzZXJ2aWNlfSR7c3VmZml4fWAsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KERlZmF1bHQuc2VydmljZVByaW5jaXBhbChgJHtzZXJ2aWNlfSR7c3VmZml4fWAsIHJlZ2lvbiwgdXJsU3VmZml4KSkudG9CZShgJHtzZXJ2aWNlfS4ke3VybFN1ZmZpeH1gKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qgc2VydmljZSBvZiBbJ2F1dG9zY2FsaW5nJywgJ2xhbWJkYScsICdldmVudHMnLCAnc25zJywgJ3NxcycsICdmb28tc2VydmljZSddKSB7XG4gICAgICB0ZXN0KGAke3NlcnZpY2V9JHtzdWZmaXh9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoRGVmYXVsdC5zZXJ2aWNlUHJpbmNpcGFsKGAke3NlcnZpY2V9JHtzdWZmaXh9YCwgcmVnaW9uLCB1cmxTdWZmaXgpKS50b0JlKGAke3NlcnZpY2V9LmFtYXpvbmF3cy5jb21gKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgdGVzdCgnd2l0aCBhbiBcImV4b3RpY1wiIEROUyBzdWZmaXggKC5sb2NhbCknLCAoKSA9PiB7XG4gICAgZXhwZWN0KERlZmF1bHQuc2VydmljZVByaW5jaXBhbCgnZm9vLXNlcnZpY2UubG9jYWwnLCByZWdpb24sIHVybFN1ZmZpeCkpLnRvQmUoJ2Zvby1zZXJ2aWNlLmxvY2FsJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ0V4Y2VwdGlvbnM6IHN0YXRlcyBpbiB1cy1pc28tZWFzdC0xJywgKCkgPT4ge1xuICAgIGV4cGVjdChEZWZhdWx0LnNlcnZpY2VQcmluY2lwYWwoJ3N0YXRlcy5hbWF6b25hd3MuY29tJywgJ3VzLWlzby1lYXN0LTEnLCAnYzJzLmljLmdvdicpKS50b0JlKCdzdGF0ZXMuYW1hem9uYXdzLmNvbScpO1xuICB9KTtcblxuICB0ZXN0KCdFeGNlcHRpb25zOiBzdGF0ZXMgaW4gdXMtaXNvYi1lYXN0LTEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KERlZmF1bHQuc2VydmljZVByaW5jaXBhbCgnc3RhdGVzLmFtYXpvbmF3cy5jb20nLCAndXMtaXNvYi1lYXN0LTEnLCAnc2Mycy5zZ292LmdvdicpKS50b0JlKCdzdGF0ZXMuYW1hem9uYXdzLmNvbScpO1xuICB9KTtcblxuICBmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgWydjbG91ZGhzbScsICdjb25maWcnLCAnd29ya3NwYWNlcyddKSB7XG4gICAgdGVzdChgRXhjZXB0aW9uczogJHtzZXJ2aWNlfS5hbWF6b25hd3MuY29tIGlzIHVzLWlzby1lYXN0LTFgLCAoKSA9PiB7XG4gICAgICBleHBlY3QoRGVmYXVsdC5zZXJ2aWNlUHJpbmNpcGFsKGAke3NlcnZpY2V9LmFtYXpvbmF3cy5jb21gLCAndXMtaXNvLWVhc3QtMScsICdjMnMuaWMuZ292JykpLnRvQmUoYCR7c2VydmljZX0uYzJzLmljLmdvdmApO1xuICAgIH0pO1xuICB9XG59KTtcbiJdfQ==