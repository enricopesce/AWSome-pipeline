"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Provides default values for certain regional information points.
 */
class Default {
    constructor() { }
    /**
     * Computes a "standard" AWS Service principal for a given service, region and suffix. This is useful for example when
     * you need to compute a service principal name, but you do not have a synthesize-time region literal available (so
     * all you have is `{ "Ref": "AWS::Region" }`). This way you get the same defaulting behavior that is normally used
     * for built-in data.
     *
     * @param service   the name of the service (s3, s3.amazonaws.com, ...)
     * @param region    the region in which the service principal is needed.
     * @param urlSuffix the URL suffix for the partition in which the region is located.
     */
    static servicePrincipal(service, region, urlSuffix) {
        const matches = service.match(/^([^.]+)(?:(?:\.amazonaws\.com(?:\.cn)?)|(?:\.c2s\.ic\.gov)|(?:\.sc2s\.sgov\.gov))?$/);
        if (!matches) {
            // Return "service" if it does not look like any of the following:
            // - s3
            // - s3.amazonaws.com
            // - s3.amazonaws.com.cn
            // - s3.c2s.ic.gov
            // - s3.sc2s.sgov.gov
            return service;
        }
        service = matches[1]; // Simplify the service name down to something like "s3"
        // Exceptions for Service Principals in us-iso-*
        const US_ISO_EXCEPTIONS = new Set([
            'cloudhsm',
            'config',
            'states',
            'workspaces',
        ]);
        // Exceptions for Service Principals in us-isob-*
        const US_ISOB_EXCEPTIONS = new Set([
            'dms',
            'states',
        ]);
        // Account for idiosyncratic Service Principals in `us-iso-*` regions
        if (region.startsWith('us-iso-') && US_ISO_EXCEPTIONS.has(service)) {
            switch (service) {
                // Services with universal principal
                case ('states'):
                    return `${service}.amazonaws.com`;
                // Services with a partitional principal
                default:
                    return `${service}.${urlSuffix}`;
            }
        }
        // Account for idiosyncratic Service Principals in `us-isob-*` regions
        if (region.startsWith('us-isob-') && US_ISOB_EXCEPTIONS.has(service)) {
            switch (service) {
                // Services with universal principal
                case ('states'):
                    return `${service}.amazonaws.com`;
                // Services with a partitional principal
                default:
                    return `${service}.${urlSuffix}`;
            }
        }
        switch (service) {
            // Services with a regional AND partitional principal
            case 'codedeploy':
            case 'logs':
                return `${service}.${region}.${urlSuffix}`;
            // Services with a regional principal
            case 'states':
                return `${service}.${region}.amazonaws.com`;
            // Services with a partitional principal
            case 'ec2':
                return `${service}.${urlSuffix}`;
            // Services with a universal principal across all regions/partitions (the default case)
            default:
                return `${service}.amazonaws.com`;
        }
    }
}
exports.Default = Default;
/**
 * The default value for a VPC Endpoint Service name prefix, useful if you do
 * not have a synthesize-time region literal available (all you have is
 * `{ "Ref": "AWS::Region" }`)
 */
Default.VPC_ENDPOINT_SERVICE_NAME_PREFIX = 'com.amazonaws.vpce';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlZmF1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7R0FFRztBQUNILE1BQWEsT0FBTztJQThGbEIsZ0JBQXdCLENBQUM7SUFyRnpCOzs7Ozs7Ozs7T0FTRztJQUNJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFlLEVBQUUsTUFBYyxFQUFFLFNBQWlCO1FBQy9FLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0ZBQXNGLENBQUMsQ0FBQztRQUN0SCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osa0VBQWtFO1lBQ2xFLE9BQU87WUFDUCxxQkFBcUI7WUFDckIsd0JBQXdCO1lBQ3hCLGtCQUFrQjtZQUNsQixxQkFBcUI7WUFDckIsT0FBTyxPQUFPLENBQUM7U0FDaEI7UUFFRCxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsd0RBQXdEO1FBRTlFLGdEQUFnRDtRQUNoRCxNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDO1lBQ2hDLFVBQVU7WUFDVixRQUFRO1lBQ1IsUUFBUTtZQUNSLFlBQVk7U0FDYixDQUFDLENBQUM7UUFFSCxpREFBaUQ7UUFDakQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQztZQUNqQyxLQUFLO1lBQ0wsUUFBUTtTQUNULENBQUMsQ0FBQztRQUVILHFFQUFxRTtRQUNyRSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksaUJBQWlCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xFLFFBQVEsT0FBTyxFQUFFO2dCQUNmLG9DQUFvQztnQkFDcEMsS0FBSyxDQUFDLFFBQVEsQ0FBQztvQkFDYixPQUFPLEdBQUcsT0FBTyxnQkFBZ0IsQ0FBQztnQkFFcEMsd0NBQXdDO2dCQUN4QztvQkFDRSxPQUFPLEdBQUcsT0FBTyxJQUFJLFNBQVMsRUFBRSxDQUFDO2FBQ3BDO1NBQ0Y7UUFFRCxzRUFBc0U7UUFDdEUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwRSxRQUFRLE9BQU8sRUFBRTtnQkFDZixvQ0FBb0M7Z0JBQ3BDLEtBQUssQ0FBQyxRQUFRLENBQUM7b0JBQ2IsT0FBTyxHQUFHLE9BQU8sZ0JBQWdCLENBQUM7Z0JBRXBDLHdDQUF3QztnQkFDeEM7b0JBQ0UsT0FBTyxHQUFHLE9BQU8sSUFBSSxTQUFTLEVBQUUsQ0FBQzthQUNwQztTQUNGO1FBRUQsUUFBUSxPQUFPLEVBQUU7WUFDZixxREFBcUQ7WUFDckQsS0FBSyxZQUFZLENBQUM7WUFDbEIsS0FBSyxNQUFNO2dCQUNULE9BQU8sR0FBRyxPQUFPLElBQUksTUFBTSxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBRTdDLHFDQUFxQztZQUNyQyxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxHQUFHLE9BQU8sSUFBSSxNQUFNLGdCQUFnQixDQUFDO1lBRTlDLHdDQUF3QztZQUN4QyxLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxHQUFHLE9BQU8sSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUVuQyx1RkFBdUY7WUFDdkY7Z0JBQ0UsT0FBTyxHQUFHLE9BQU8sZ0JBQWdCLENBQUM7U0FFckM7SUFDSCxDQUFDOztBQTVGSCwwQkErRkM7QUE3RkM7Ozs7R0FJRztBQUNvQix3Q0FBZ0MsR0FBRyxvQkFBb0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJvdmlkZXMgZGVmYXVsdCB2YWx1ZXMgZm9yIGNlcnRhaW4gcmVnaW9uYWwgaW5mb3JtYXRpb24gcG9pbnRzLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdCB7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGZvciBhIFZQQyBFbmRwb2ludCBTZXJ2aWNlIG5hbWUgcHJlZml4LCB1c2VmdWwgaWYgeW91IGRvXG4gICAqIG5vdCBoYXZlIGEgc3ludGhlc2l6ZS10aW1lIHJlZ2lvbiBsaXRlcmFsIGF2YWlsYWJsZSAoYWxsIHlvdSBoYXZlIGlzXG4gICAqIGB7IFwiUmVmXCI6IFwiQVdTOjpSZWdpb25cIiB9YClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVlBDX0VORFBPSU5UX1NFUlZJQ0VfTkFNRV9QUkVGSVggPSAnY29tLmFtYXpvbmF3cy52cGNlJztcblxuICAvKipcbiAgICogQ29tcHV0ZXMgYSBcInN0YW5kYXJkXCIgQVdTIFNlcnZpY2UgcHJpbmNpcGFsIGZvciBhIGdpdmVuIHNlcnZpY2UsIHJlZ2lvbiBhbmQgc3VmZml4LiBUaGlzIGlzIHVzZWZ1bCBmb3IgZXhhbXBsZSB3aGVuXG4gICAqIHlvdSBuZWVkIHRvIGNvbXB1dGUgYSBzZXJ2aWNlIHByaW5jaXBhbCBuYW1lLCBidXQgeW91IGRvIG5vdCBoYXZlIGEgc3ludGhlc2l6ZS10aW1lIHJlZ2lvbiBsaXRlcmFsIGF2YWlsYWJsZSAoc29cbiAgICogYWxsIHlvdSBoYXZlIGlzIGB7IFwiUmVmXCI6IFwiQVdTOjpSZWdpb25cIiB9YCkuIFRoaXMgd2F5IHlvdSBnZXQgdGhlIHNhbWUgZGVmYXVsdGluZyBiZWhhdmlvciB0aGF0IGlzIG5vcm1hbGx5IHVzZWRcbiAgICogZm9yIGJ1aWx0LWluIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSBzZXJ2aWNlICAgdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgKHMzLCBzMy5hbWF6b25hd3MuY29tLCAuLi4pXG4gICAqIEBwYXJhbSByZWdpb24gICAgdGhlIHJlZ2lvbiBpbiB3aGljaCB0aGUgc2VydmljZSBwcmluY2lwYWwgaXMgbmVlZGVkLlxuICAgKiBAcGFyYW0gdXJsU3VmZml4IHRoZSBVUkwgc3VmZml4IGZvciB0aGUgcGFydGl0aW9uIGluIHdoaWNoIHRoZSByZWdpb24gaXMgbG9jYXRlZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc2VydmljZVByaW5jaXBhbChzZXJ2aWNlOiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nLCB1cmxTdWZmaXg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHNlcnZpY2UubWF0Y2goL14oW14uXSspKD86KD86XFwuYW1hem9uYXdzXFwuY29tKD86XFwuY24pPyl8KD86XFwuYzJzXFwuaWNcXC5nb3YpfCg/OlxcLnNjMnNcXC5zZ292XFwuZ292KSk/JC8pO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgLy8gUmV0dXJuIFwic2VydmljZVwiIGlmIGl0IGRvZXMgbm90IGxvb2sgbGlrZSBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAgICAgIC8vIC0gczNcbiAgICAgIC8vIC0gczMuYW1hem9uYXdzLmNvbVxuICAgICAgLy8gLSBzMy5hbWF6b25hd3MuY29tLmNuXG4gICAgICAvLyAtIHMzLmMycy5pYy5nb3ZcbiAgICAgIC8vIC0gczMuc2Mycy5zZ292LmdvdlxuICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfVxuXG4gICAgc2VydmljZSA9IG1hdGNoZXNbMV07IC8vIFNpbXBsaWZ5IHRoZSBzZXJ2aWNlIG5hbWUgZG93biB0byBzb21ldGhpbmcgbGlrZSBcInMzXCJcblxuICAgIC8vIEV4Y2VwdGlvbnMgZm9yIFNlcnZpY2UgUHJpbmNpcGFscyBpbiB1cy1pc28tKlxuICAgIGNvbnN0IFVTX0lTT19FWENFUFRJT05TID0gbmV3IFNldChbXG4gICAgICAnY2xvdWRoc20nLFxuICAgICAgJ2NvbmZpZycsXG4gICAgICAnc3RhdGVzJyxcbiAgICAgICd3b3Jrc3BhY2VzJyxcbiAgICBdKTtcblxuICAgIC8vIEV4Y2VwdGlvbnMgZm9yIFNlcnZpY2UgUHJpbmNpcGFscyBpbiB1cy1pc29iLSpcbiAgICBjb25zdCBVU19JU09CX0VYQ0VQVElPTlMgPSBuZXcgU2V0KFtcbiAgICAgICdkbXMnLFxuICAgICAgJ3N0YXRlcycsXG4gICAgXSk7XG5cbiAgICAvLyBBY2NvdW50IGZvciBpZGlvc3luY3JhdGljIFNlcnZpY2UgUHJpbmNpcGFscyBpbiBgdXMtaXNvLSpgIHJlZ2lvbnNcbiAgICBpZiAocmVnaW9uLnN0YXJ0c1dpdGgoJ3VzLWlzby0nKSAmJiBVU19JU09fRVhDRVBUSU9OUy5oYXMoc2VydmljZSkpIHtcbiAgICAgIHN3aXRjaCAoc2VydmljZSkge1xuICAgICAgICAvLyBTZXJ2aWNlcyB3aXRoIHVuaXZlcnNhbCBwcmluY2lwYWxcbiAgICAgICAgY2FzZSAoJ3N0YXRlcycpOlxuICAgICAgICAgIHJldHVybiBgJHtzZXJ2aWNlfS5hbWF6b25hd3MuY29tYDtcblxuICAgICAgICAvLyBTZXJ2aWNlcyB3aXRoIGEgcGFydGl0aW9uYWwgcHJpbmNpcGFsXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGAke3NlcnZpY2V9LiR7dXJsU3VmZml4fWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWNjb3VudCBmb3IgaWRpb3N5bmNyYXRpYyBTZXJ2aWNlIFByaW5jaXBhbHMgaW4gYHVzLWlzb2ItKmAgcmVnaW9uc1xuICAgIGlmIChyZWdpb24uc3RhcnRzV2l0aCgndXMtaXNvYi0nKSAmJiBVU19JU09CX0VYQ0VQVElPTlMuaGFzKHNlcnZpY2UpKSB7XG4gICAgICBzd2l0Y2ggKHNlcnZpY2UpIHtcbiAgICAgICAgLy8gU2VydmljZXMgd2l0aCB1bml2ZXJzYWwgcHJpbmNpcGFsXG4gICAgICAgIGNhc2UgKCdzdGF0ZXMnKTpcbiAgICAgICAgICByZXR1cm4gYCR7c2VydmljZX0uYW1hem9uYXdzLmNvbWA7XG5cbiAgICAgICAgLy8gU2VydmljZXMgd2l0aCBhIHBhcnRpdGlvbmFsIHByaW5jaXBhbFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBgJHtzZXJ2aWNlfS4ke3VybFN1ZmZpeH1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAoc2VydmljZSkge1xuICAgICAgLy8gU2VydmljZXMgd2l0aCBhIHJlZ2lvbmFsIEFORCBwYXJ0aXRpb25hbCBwcmluY2lwYWxcbiAgICAgIGNhc2UgJ2NvZGVkZXBsb3knOlxuICAgICAgY2FzZSAnbG9ncyc6XG4gICAgICAgIHJldHVybiBgJHtzZXJ2aWNlfS4ke3JlZ2lvbn0uJHt1cmxTdWZmaXh9YDtcblxuICAgICAgLy8gU2VydmljZXMgd2l0aCBhIHJlZ2lvbmFsIHByaW5jaXBhbFxuICAgICAgY2FzZSAnc3RhdGVzJzpcbiAgICAgICAgcmV0dXJuIGAke3NlcnZpY2V9LiR7cmVnaW9ufS5hbWF6b25hd3MuY29tYDtcblxuICAgICAgLy8gU2VydmljZXMgd2l0aCBhIHBhcnRpdGlvbmFsIHByaW5jaXBhbFxuICAgICAgY2FzZSAnZWMyJzpcbiAgICAgICAgcmV0dXJuIGAke3NlcnZpY2V9LiR7dXJsU3VmZml4fWA7XG5cbiAgICAgIC8vIFNlcnZpY2VzIHdpdGggYSB1bml2ZXJzYWwgcHJpbmNpcGFsIGFjcm9zcyBhbGwgcmVnaW9ucy9wYXJ0aXRpb25zICh0aGUgZGVmYXVsdCBjYXNlKVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGAke3NlcnZpY2V9LmFtYXpvbmF3cy5jb21gO1xuXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHsgfVxufVxuIl19