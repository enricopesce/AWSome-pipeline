"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The type of asset hash
 */
var AssetHashType;
(function (AssetHashType) {
    /**
     * Based on the content of the source path
     */
    AssetHashType["SOURCE"] = "source";
    /**
     * Based on the content of the bundled path
     */
    AssetHashType["BUNDLE"] = "bundle";
    /**
     * Use a custom hash
     */
    AssetHashType["CUSTOM"] = "custom";
})(AssetHashType = exports.AssetHashType || (exports.AssetHashType = {}));
/**
 * Packaging modes for file assets.
 */
var FileAssetPackaging;
(function (FileAssetPackaging) {
    /**
     * The asset source path points to a directory, which should be archived using
     * zip and and then uploaded to Amazon S3.
     */
    FileAssetPackaging["ZIP_DIRECTORY"] = "zip";
    /**
     * The asset source path points to a single file, which should be uploaded
     * to Amazon S3.
     */
    FileAssetPackaging["FILE"] = "file";
})(FileAssetPackaging = exports.FileAssetPackaging || (exports.FileAssetPackaging = {}));
//# sourceMappingURL=data:application/json;base64,