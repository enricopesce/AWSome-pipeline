"use strict";
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const fs = require("fs");
const path = require("path");
const index_1 = require("../../lib/index");
class AbstractCfnResource extends index_1.CfnResource {
    constructor(scope, id) {
        super(scope, id, {
            type: 'CDK::UnitTest::MyCfnResource',
        });
    }
    inspect(inspector) {
        inspector.addAttribute('aws:cdk:cloudformation:type', 'CDK::UnitTest::MyCfnResource');
        inspector.addAttribute('aws:cdk:cloudformation:props', this.cfnProperties);
    }
}
function readJson(outdir, file) {
    return JSON.parse(fs.readFileSync(path.join(outdir, file), 'utf-8'));
}
module.exports = {
    'tree metadata is generated as expected'(test) {
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        new index_1.Construct(stack, 'myconstruct');
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        test.ok(treeArtifact);
        test.deepEqual(readJson(assembly.directory, treeArtifact.file), {
            version: 'tree-0.1',
            tree: {
                id: 'App',
                path: '',
                children: {
                    Tree: {
                        id: 'Tree',
                        path: 'Tree',
                    },
                    mystack: {
                        id: 'mystack',
                        path: 'mystack',
                        children: {
                            myconstruct: {
                                id: 'myconstruct',
                                path: 'mystack/myconstruct',
                            },
                        },
                    },
                },
            },
        });
        test.done();
    },
    'tree metadata for a Cfn resource'(test) {
        class MyCfnResource extends AbstractCfnResource {
            get cfnProperties() {
                return {
                    mystringpropkey: 'mystringpropval',
                    mylistpropkey: ['listitem1'],
                    mystructpropkey: {
                        myboolpropkey: true,
                        mynumpropkey: 50,
                    },
                };
            }
        }
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        new MyCfnResource(stack, 'mycfnresource');
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        test.ok(treeArtifact);
        test.deepEqual(readJson(assembly.directory, treeArtifact.file), {
            version: 'tree-0.1',
            tree: {
                id: 'App',
                path: '',
                children: {
                    Tree: {
                        id: 'Tree',
                        path: 'Tree',
                    },
                    mystack: {
                        id: 'mystack',
                        path: 'mystack',
                        children: {
                            mycfnresource: {
                                id: 'mycfnresource',
                                path: 'mystack/mycfnresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        mystringpropkey: 'mystringpropval',
                                        mylistpropkey: ['listitem1'],
                                        mystructpropkey: {
                                            myboolpropkey: true,
                                            mynumpropkey: 50,
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        });
        test.done();
    },
    'token resolution & cfn parameter'(test) {
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        const cfnparam = new index_1.CfnParameter(stack, 'mycfnparam');
        class MyCfnResource extends AbstractCfnResource {
            get cfnProperties() {
                return {
                    lazykey: index_1.Lazy.stringValue({ produce: () => 'LazyResolved!' }),
                    cfnparamkey: cfnparam,
                };
            }
        }
        new MyCfnResource(stack, 'mycfnresource');
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        test.ok(treeArtifact);
        test.deepEqual(readJson(assembly.directory, treeArtifact.file), {
            version: 'tree-0.1',
            tree: {
                id: 'App',
                path: '',
                children: {
                    Tree: {
                        id: 'Tree',
                        path: 'Tree',
                    },
                    mystack: {
                        id: 'mystack',
                        path: 'mystack',
                        children: {
                            mycfnparam: {
                                id: 'mycfnparam',
                                path: 'mystack/mycfnparam',
                            },
                            mycfnresource: {
                                id: 'mycfnresource',
                                path: 'mystack/mycfnresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        lazykey: 'LazyResolved!',
                                        cfnparamkey: { Ref: 'mycfnparam' },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        });
        test.done();
    },
    'cross-stack tokens'(test) {
        class MyFirstResource extends AbstractCfnResource {
            constructor(scope, id) {
                super(scope, id);
                this.lazykey = index_1.Lazy.stringValue({ produce: () => 'LazyResolved!' });
            }
            get cfnProperties() {
                return {
                    lazykey: this.lazykey,
                };
            }
        }
        class MySecondResource extends AbstractCfnResource {
            constructor(scope, id, myprop) {
                super(scope, id);
                this.myprop = myprop;
            }
            get cfnProperties() {
                return {
                    myprop: this.myprop,
                };
            }
        }
        const app = new index_1.App();
        const firststack = new index_1.Stack(app, 'myfirststack');
        const firstres = new MyFirstResource(firststack, 'myfirstresource');
        const secondstack = new index_1.Stack(app, 'mysecondstack');
        new MySecondResource(secondstack, 'mysecondresource', firstres.lazykey);
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        test.ok(treeArtifact);
        test.deepEqual(readJson(assembly.directory, treeArtifact.file), {
            version: 'tree-0.1',
            tree: {
                id: 'App',
                path: '',
                children: {
                    Tree: {
                        id: 'Tree',
                        path: 'Tree',
                    },
                    myfirststack: {
                        id: 'myfirststack',
                        path: 'myfirststack',
                        children: {
                            myfirstresource: {
                                id: 'myfirstresource',
                                path: 'myfirststack/myfirstresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        lazykey: 'LazyResolved!',
                                    },
                                },
                            },
                        },
                    },
                    mysecondstack: {
                        id: 'mysecondstack',
                        path: 'mysecondstack',
                        children: {
                            mysecondresource: {
                                id: 'mysecondresource',
                                path: 'mysecondstack/mysecondresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        myprop: 'LazyResolved!',
                                    },
                                },
                            },
                        },
                    },
                },
            },
        });
        test.done();
    },
    'failing nodes'(test) {
        class MyCfnResource extends index_1.CfnResource {
            inspect(_) {
                throw new Error('Forcing an inspect error');
            }
        }
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        new MyCfnResource(stack, 'mycfnresource', {
            type: 'CDK::UnitTest::MyCfnResource',
        });
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        test.ok(treeArtifact);
        const treenode = app.node.findChild('Tree');
        const warn = treenode.node.metadata.find((md) => {
            return md.type === cxschema.ArtifactMetadataEntryType.WARN
                && /Forcing an inspect error/.test(md.data)
                && /mycfnresource/.test(md.data);
        });
        test.ok(warn);
        // assert that the rest of the construct tree is rendered
        test.deepEqual(readJson(assembly.directory, treeArtifact.file), {
            version: 'tree-0.1',
            tree: {
                id: 'App',
                path: '',
                children: {
                    Tree: {
                        id: 'Tree',
                        path: 'Tree',
                    },
                    mystack: {
                        id: 'mystack',
                        path: 'mystack',
                    },
                },
            },
        });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,