"use strict";
const fs = require("fs");
const os = require("os");
const path = require("path");
const fs_1 = require("../../lib/fs");
module.exports = {
    files: {
        'does not change with the file name'(test) {
            // GIVEN
            const workdir = fs.mkdtempSync(path.join(os.tmpdir(), 'hash-tests'));
            const content = 'Hello, world!';
            const input1 = path.join(workdir, 'input1.txt');
            const input2 = path.join(workdir, 'input2.txt');
            const input3 = path.join(workdir, 'input3.txt');
            fs.writeFileSync(input1, content);
            fs.writeFileSync(input2, content);
            fs.writeFileSync(input3, content + '.'); // add one character, hash should be different
            // WHEN
            const hash1 = fs_1.FileSystem.fingerprint(input1);
            const hash2 = fs_1.FileSystem.fingerprint(input2);
            const hash3 = fs_1.FileSystem.fingerprint(input3);
            // THEN
            test.deepEqual(hash1, hash2);
            test.notDeepEqual(hash3, hash1);
            test.done();
        },
        'works on empty files'(test) {
            // GIVEN
            const workdir = fs.mkdtempSync(path.join(os.tmpdir(), 'hash-tests'));
            const input1 = path.join(workdir, 'empty');
            const input2 = path.join(workdir, 'empty');
            fs.writeFileSync(input1, '');
            fs.writeFileSync(input2, '');
            // WHEN
            const hash1 = fs_1.FileSystem.fingerprint(input1);
            const hash2 = fs_1.FileSystem.fingerprint(input2);
            // THEN
            test.deepEqual(hash1, hash2);
            test.done();
        },
    },
    directories: {
        'works on directories'(test) {
            // GIVEN
            const srcdir = path.join(__dirname, 'fixtures', 'symlinks');
            const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'copy-tests'));
            fs_1.FileSystem.copyDirectory(srcdir, outdir);
            // WHEN
            const hashSrc = fs_1.FileSystem.fingerprint(srcdir);
            const hashCopy = fs_1.FileSystem.fingerprint(outdir);
            // THEN
            test.deepEqual(hashSrc, hashCopy);
            test.done();
        },
        'ignores requested files'(test) {
            // GIVEN
            const srcdir = path.join(__dirname, 'fixtures', 'symlinks');
            const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'copy-tests'));
            fs_1.FileSystem.copyDirectory(srcdir, outdir);
            // WHEN
            const hashSrc = fs_1.FileSystem.fingerprint(srcdir, { exclude: ['*.ignoreme'] });
            fs.writeFileSync(path.join(outdir, `${hashSrc}.ignoreme`), 'Ignore me!');
            const hashCopy = fs_1.FileSystem.fingerprint(outdir, { exclude: ['*.ignoreme'] });
            // THEN
            test.deepEqual(hashSrc, hashCopy);
            test.done();
        },
        'changes with file names'(test) {
            // GIVEN
            const srcdir = path.join(__dirname, 'fixtures', 'symlinks');
            const cpydir = fs.mkdtempSync(path.join(os.tmpdir(), 'fingerprint-tests'));
            fs_1.FileSystem.copyDirectory(srcdir, cpydir);
            // be careful not to break a symlink
            fs.renameSync(path.join(cpydir, 'normal-dir', 'file-in-subdir.txt'), path.join(cpydir, 'move-me.txt'));
            // WHEN
            const hashSrc = fs_1.FileSystem.fingerprint(srcdir);
            const hashCopy = fs_1.FileSystem.fingerprint(cpydir);
            // THEN
            test.notDeepEqual(hashSrc, hashCopy);
            test.done();
        },
    },
    symlinks: {
        'changes with the contents of followed symlink referent'(test) {
            // GIVEN
            const dir1 = fs.mkdtempSync(path.join(os.tmpdir(), 'fingerprint-tests'));
            const dir2 = fs.mkdtempSync(path.join(os.tmpdir(), 'fingerprint-tests'));
            const target = path.join(dir1, 'boom.txt');
            const content = 'boom';
            fs.writeFileSync(target, content);
            fs.symlinkSync(target, path.join(dir2, 'link-to-boom.txt'));
            // now dir2 contains a symlink to a file in dir1
            // WHEN
            const original = fs_1.FileSystem.fingerprint(dir2);
            // now change the contents of the target
            fs.writeFileSync(target, 'changning you!');
            const afterChange = fs_1.FileSystem.fingerprint(dir2);
            // revert the content to original and expect hash to be reverted
            fs.writeFileSync(target, content);
            const afterRevert = fs_1.FileSystem.fingerprint(dir2);
            // THEN
            test.notDeepEqual(original, afterChange);
            test.deepEqual(afterRevert, original);
            test.done();
        },
        'does not change with the contents of un-followed symlink referent'(test) {
            // GIVEN
            const dir1 = fs.mkdtempSync(path.join(os.tmpdir(), 'fingerprint-tests'));
            const dir2 = fs.mkdtempSync(path.join(os.tmpdir(), 'fingerprint-tests'));
            const target = path.join(dir1, 'boom.txt');
            const content = 'boom';
            fs.writeFileSync(target, content);
            fs.symlinkSync(target, path.join(dir2, 'link-to-boom.txt'));
            // now dir2 contains a symlink to a file in dir1
            // WHEN
            const original = fs_1.FileSystem.fingerprint(dir2, { follow: fs_1.SymlinkFollowMode.NEVER });
            // now change the contents of the target
            fs.writeFileSync(target, 'changning you!');
            const afterChange = fs_1.FileSystem.fingerprint(dir2, { follow: fs_1.SymlinkFollowMode.NEVER });
            // revert the content to original and expect hash to be reverted
            fs.writeFileSync(target, content);
            const afterRevert = fs_1.FileSystem.fingerprint(dir2, { follow: fs_1.SymlinkFollowMode.NEVER });
            // THEN
            test.deepEqual(original, afterChange);
            test.deepEqual(afterRevert, original);
            test.done();
        },
    },
    exclude: {
        'encodes exclude patterns'(test) {
            // GIVEN
            const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'fingerprint-tests'));
            const options1 = { path: dir, exclude: ['**', '!file.py'], sourcePath: dir };
            const options2 = { path: dir, exclude: ['**', '!otherfile.py'], sourcePath: dir };
            // WHEN
            const f1 = fs_1.FileSystem.fingerprint(dir, options1);
            const f2 = fs_1.FileSystem.fingerprint(dir, options2);
            // THEN
            test.notDeepEqual(f1, f2);
            test.done();
        },
        'considers negated exclude patterns for fingerprint'(test) {
            // GIVEN
            const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'fingerprint-tests'));
            const options = { path: dir, exclude: ['**', '!file.txt'], sourcePath: dir };
            // WHEN
            const f1 = fs_1.FileSystem.fingerprint(dir, options);
            fs.writeFileSync(path.join(dir, 'file.txt'), 'data');
            const f2 = fs_1.FileSystem.fingerprint(dir, options);
            // THEN
            test.notDeepEqual(f1, f2);
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,