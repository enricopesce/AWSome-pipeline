"use strict";
const child_process = require("child_process");
const sinon = require("sinon");
const lib_1 = require("../lib");
module.exports = {
    'tearDown'(callback) {
        sinon.restore();
        callback();
    },
    'bundling with image from registry'(test) {
        const spawnSyncStub = sinon.stub(child_process, 'spawnSync').returns({
            status: 0,
            stderr: Buffer.from('stderr'),
            stdout: Buffer.from('stdout'),
            pid: 123,
            output: ['stdout', 'stderr'],
            signal: null,
        });
        const image = lib_1.BundlingDockerImage.fromRegistry('alpine');
        image._run({
            command: ['cool', 'command'],
            environment: {
                VAR1: 'value1',
                VAR2: 'value2',
            },
            volumes: [{ hostPath: '/host-path', containerPath: '/container-path' }],
            workingDirectory: '/working-directory',
        });
        test.ok(spawnSyncStub.calledWith('docker', [
            'run', '--rm',
            '-v', '/host-path:/container-path',
            '--env', 'VAR1=value1',
            '--env', 'VAR2=value2',
            '-w', '/working-directory',
            'alpine',
            'cool', 'command',
        ]));
        test.done();
    },
    'bundling with image from asset'(test) {
        const imageId = 'abcdef123456';
        const spawnSyncStub = sinon.stub(child_process, 'spawnSync').returns({
            status: 0,
            stderr: Buffer.from('stderr'),
            stdout: Buffer.from(`Successfully built ${imageId}`),
            pid: 123,
            output: ['stdout', 'stderr'],
            signal: null,
        });
        const image = lib_1.BundlingDockerImage.fromAsset('docker-path', {
            buildArgs: {
                TEST_ARG: 'cdk-test',
            },
        });
        image._run();
        test.ok(spawnSyncStub.firstCall.calledWith('docker', [
            'build',
            '--build-arg', 'TEST_ARG=cdk-test',
            'docker-path',
        ]));
        test.ok(spawnSyncStub.secondCall.calledWith('docker', [
            'run', '--rm',
            imageId,
        ]));
        test.done();
    },
    'throws if image id cannot be extracted from build output'(test) {
        sinon.stub(child_process, 'spawnSync').returns({
            status: 0,
            stderr: Buffer.from('stderr'),
            stdout: Buffer.from('stdout'),
            pid: 123,
            output: ['stdout', 'stderr'],
            signal: null,
        });
        test.throws(() => lib_1.BundlingDockerImage.fromAsset('docker-path'), /Failed to extract image ID from Docker build output/);
        test.done();
    },
    'throws in case of spawnSync error'(test) {
        sinon.stub(child_process, 'spawnSync').returns({
            status: 0,
            stderr: Buffer.from('stderr'),
            stdout: Buffer.from('stdout'),
            pid: 123,
            output: ['stdout', 'stderr'],
            signal: null,
            error: new Error('UnknownError'),
        });
        const image = lib_1.BundlingDockerImage.fromRegistry('alpine');
        test.throws(() => image._run(), /UnknownError/);
        test.done();
    },
    'throws if status is not 0'(test) {
        sinon.stub(child_process, 'spawnSync').returns({
            status: -1,
            stderr: Buffer.from('stderr'),
            stdout: Buffer.from('stdout'),
            pid: 123,
            output: ['stdout', 'stderr'],
            signal: null,
        });
        const image = lib_1.BundlingDockerImage.fromRegistry('alpine');
        test.throws(() => image._run(), /\[Status -1\]/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,