"use strict";
const lib_1 = require("../lib");
const util_1 = require("./util");
module.exports = {
    'simple case provider identified by service token'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        new lib_1.CustomResource(stack, 'MyCustomResource', {
            serviceToken: 'MyServiceToken',
            properties: {
                Prop1: 'boo',
                Prop2: 'bar',
            },
        });
        // THEN
        test.deepEqual(util_1.toCloudFormation(stack), {
            Resources: {
                MyCustomResource: {
                    Type: 'AWS::CloudFormation::CustomResource',
                    Properties: {
                        ServiceToken: 'MyServiceToken',
                        Prop1: 'boo',
                        Prop2: 'bar',
                    },
                    UpdateReplacePolicy: 'Delete',
                    DeletionPolicy: 'Delete',
                },
            },
        });
        test.done();
    },
    'resource type can be specified'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        new lib_1.CustomResource(stack, 'MyCustomResource', {
            serviceToken: 'MyServiceToken',
            resourceType: 'Custom::MyResourceType',
        });
        // THEN
        test.deepEqual(util_1.toCloudFormation(stack), {
            Resources: {
                MyCustomResource: {
                    Type: 'Custom::MyResourceType',
                    Properties: {
                        ServiceToken: 'MyServiceToken',
                    },
                    UpdateReplacePolicy: 'Delete',
                    DeletionPolicy: 'Delete',
                },
            },
        });
        test.done();
    },
    'removal policy'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        new lib_1.CustomResource(stack, 'MyCustomResource', {
            serviceToken: 'MyServiceToken',
            removalPolicy: lib_1.RemovalPolicy.RETAIN,
        });
        // THEN
        test.deepEqual(util_1.toCloudFormation(stack), {
            Resources: {
                MyCustomResource: {
                    Type: 'AWS::CloudFormation::CustomResource',
                    Properties: {
                        ServiceToken: 'MyServiceToken',
                    },
                    UpdateReplacePolicy: 'Retain',
                    DeletionPolicy: 'Retain',
                },
            },
        });
        test.done();
    },
    'resource type must begin with "Custom::"'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // THEN
        test.throws(() => new lib_1.CustomResource(stack, 'MyCustomResource', {
            resourceType: 'MyResourceType',
            serviceToken: 'FooBar',
        }), /Custom resource type must begin with "Custom::"/);
        test.done();
    },
    'properties can be pascal-cased'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        new lib_1.CustomResource(stack, 'MyCustomResource', {
            serviceToken: 'MyServiceToken',
            pascalCaseProperties: true,
            properties: {
                prop1: 'boo',
                boom: {
                    onlyFirstLevel: 1234,
                },
            },
        });
        // THEN
        test.deepEqual(util_1.toCloudFormation(stack), {
            Resources: {
                MyCustomResource: {
                    Type: 'AWS::CloudFormation::CustomResource',
                    Properties: {
                        ServiceToken: 'MyServiceToken',
                        Prop1: 'boo',
                        Boom: {
                            onlyFirstLevel: 1234,
                        },
                    },
                    UpdateReplacePolicy: 'Delete',
                    DeletionPolicy: 'Delete',
                },
            },
        });
        test.done();
    },
    'pascal-casing of props is disabled by default'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        new lib_1.CustomResource(stack, 'MyCustomResource', {
            serviceToken: 'MyServiceToken',
            properties: {
                prop1: 'boo',
                boom: {
                    onlyFirstLevel: 1234,
                },
            },
        });
        // THEN
        test.deepEqual(util_1.toCloudFormation(stack), {
            Resources: {
                MyCustomResource: {
                    Type: 'AWS::CloudFormation::CustomResource',
                    Properties: {
                        ServiceToken: 'MyServiceToken',
                        prop1: 'boo',
                        boom: {
                            onlyFirstLevel: 1234,
                        },
                    },
                    UpdateReplacePolicy: 'Delete',
                    DeletionPolicy: 'Delete',
                },
            },
        });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,