"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
describe('Docker image asset', () => {
    test('valid input', () => {
        expect(() => {
            lib_1.AssetManifestSchema.validate({
                version: lib_1.AssetManifestSchema.currentVersion(),
                dockerImages: {
                    asset: {
                        source: {
                            directory: '.',
                        },
                        destinations: {
                            dest: {
                                region: 'us-north-20',
                                repositoryName: 'REPO',
                                imageTag: 'TAG',
                            },
                        },
                    },
                },
            });
        }).not.toThrow();
    });
    test('invalid input', () => {
        expect(() => {
            lib_1.AssetManifestSchema.validate({
                version: lib_1.AssetManifestSchema.currentVersion(),
                dockerImages: {
                    asset: {
                        source: {},
                        destinations: {},
                    },
                },
            });
        }).toThrow(/dockerImages: source: Expected key 'directory' missing/);
    });
});
describe('File asset', () => {
    describe('valid input', () => {
        test('without packaging', () => {
            expect(() => {
                lib_1.AssetManifestSchema.validate({
                    version: lib_1.AssetManifestSchema.currentVersion(),
                    files: {
                        asset: {
                            source: {
                                path: 'a/b/c',
                            },
                            destinations: {
                                dest: {
                                    region: 'us-north-20',
                                    bucketName: 'Bouquet',
                                    objectKey: 'key',
                                },
                            },
                        },
                    },
                });
            }).not.toThrow();
        });
        for (const packaging of Object.values(lib_1.FileAssetPackaging)) {
            test(`with "${packaging}" packaging`, () => {
                expect(() => {
                    lib_1.AssetManifestSchema.validate({
                        version: lib_1.AssetManifestSchema.currentVersion(),
                        files: {
                            asset: {
                                source: {
                                    path: 'a/b/c',
                                    packaging,
                                },
                                destinations: {
                                    dest: {
                                        region: 'us-north-20',
                                        bucketName: 'Bouquet',
                                        objectKey: 'key',
                                    },
                                },
                            },
                        },
                    });
                }).not.toThrow();
            });
        }
    });
    describe('invalid input', () => {
        test('bad "source.path" property', () => {
            expect(() => {
                lib_1.AssetManifestSchema.validate({
                    version: lib_1.AssetManifestSchema.currentVersion(),
                    files: {
                        asset: {
                            source: {
                                path: 3,
                            },
                            destinations: {
                                dest: {
                                    region: 'us-north-20',
                                    bucketName: 'Bouquet',
                                    objectKey: 'key',
                                },
                            },
                        },
                    },
                });
            }).toThrow(/Expected a string, got '3'/);
        });
        test('bad "source.packaging" property', () => {
            expect(() => {
                lib_1.AssetManifestSchema.validate({
                    version: lib_1.AssetManifestSchema.currentVersion(),
                    files: {
                        asset: {
                            source: {
                                path: 'a/b/c',
                                packaging: 'BLACK_HOLE',
                            },
                            destinations: {
                                dest: {
                                    region: 'us-north-20',
                                    bucketName: 'Bouquet',
                                    objectKey: 'key',
                                },
                            },
                        },
                    },
                });
            }).toThrow(/Expected a FileAssetPackaging \(one of [^)]+\), got 'BLACK_HOLE'/);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,