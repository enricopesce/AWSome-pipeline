"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
function validateProps(props) {
    validateRange('delivery delay', props.deliveryDelay && props.deliveryDelay.toSeconds(), 0, 900, 'seconds');
    validateRange('maximum message size', props.maxMessageSizeBytes, 1024, 262144, 'bytes');
    validateRange('message retention period', props.retentionPeriod && props.retentionPeriod.toSeconds(), 60, 1209600, 'seconds');
    validateRange('receive wait time', props.receiveMessageWaitTime && props.receiveMessageWaitTime.toSeconds(), 0, 20, 'seconds');
    validateRange('visibility timeout', props.visibilityTimeout && props.visibilityTimeout.toSeconds(), 0, 43200, 'seconds');
    validateRange('dead letter target maximum receive count', props.deadLetterQueue && props.deadLetterQueue.maxReceiveCount, 1, +Infinity);
}
exports.validateProps = validateProps;
function validateRange(label, value, minValue, maxValue, unit) {
    if (value === undefined || core_1.Token.isUnresolved(value)) {
        return;
    }
    const unitSuffix = unit ? ` ${unit}` : '';
    if (value < minValue) {
        throw new Error(`${label} must be ${minValue}${unitSuffix} or more, but ${value} was provided`);
    }
    if (value > maxValue) {
        throw new Error(`${label} must be ${maxValue}${unitSuffix} of less, but ${value} was provided`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtcHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2YWxpZGF0ZS1wcm9wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUFzQztBQUd0QyxTQUFnQixhQUFhLENBQUMsS0FBaUI7SUFDN0MsYUFBYSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxhQUFhLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNHLGFBQWEsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsbUJBQW1CLEVBQUUsSUFBSyxFQUFFLE1BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRixhQUFhLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLGVBQWUsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEksYUFBYSxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxzQkFBc0IsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMvSCxhQUFhLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLGlCQUFpQixJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzFILGFBQWEsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLENBQUMsZUFBZSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFJLENBQUM7QUFQRCxzQ0FPQztBQUVELFNBQVMsYUFBYSxDQUFDLEtBQWEsRUFBRSxLQUF5QixFQUFFLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxJQUFhO0lBQ2hILElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxZQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQUUsT0FBTztLQUFFO0lBQ2pFLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFDLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFlBQVksUUFBUSxHQUFHLFVBQVUsaUJBQWlCLEtBQUssZUFBZSxDQUFDLENBQUM7S0FBRTtJQUMxSCxJQUFJLEtBQUssR0FBRyxRQUFRLEVBQUU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxZQUFZLFFBQVEsR0FBRyxVQUFVLGlCQUFpQixLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQUU7QUFDNUgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRva2VuIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBRdWV1ZVByb3BzIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVByb3BzKHByb3BzOiBRdWV1ZVByb3BzKSB7XG4gIHZhbGlkYXRlUmFuZ2UoJ2RlbGl2ZXJ5IGRlbGF5JywgcHJvcHMuZGVsaXZlcnlEZWxheSAmJiBwcm9wcy5kZWxpdmVyeURlbGF5LnRvU2Vjb25kcygpLCAwLCA5MDAsICdzZWNvbmRzJyk7XG4gIHZhbGlkYXRlUmFuZ2UoJ21heGltdW0gbWVzc2FnZSBzaXplJywgcHJvcHMubWF4TWVzc2FnZVNpemVCeXRlcywgMV8wMjQsIDI2Ml8xNDQsICdieXRlcycpO1xuICB2YWxpZGF0ZVJhbmdlKCdtZXNzYWdlIHJldGVudGlvbiBwZXJpb2QnLCBwcm9wcy5yZXRlbnRpb25QZXJpb2QgJiYgcHJvcHMucmV0ZW50aW9uUGVyaW9kLnRvU2Vjb25kcygpLCA2MCwgMV8yMDlfNjAwLCAnc2Vjb25kcycpO1xuICB2YWxpZGF0ZVJhbmdlKCdyZWNlaXZlIHdhaXQgdGltZScsIHByb3BzLnJlY2VpdmVNZXNzYWdlV2FpdFRpbWUgJiYgcHJvcHMucmVjZWl2ZU1lc3NhZ2VXYWl0VGltZS50b1NlY29uZHMoKSwgMCwgMjAsICdzZWNvbmRzJyk7XG4gIHZhbGlkYXRlUmFuZ2UoJ3Zpc2liaWxpdHkgdGltZW91dCcsIHByb3BzLnZpc2liaWxpdHlUaW1lb3V0ICYmIHByb3BzLnZpc2liaWxpdHlUaW1lb3V0LnRvU2Vjb25kcygpLCAwLCA0M18yMDAsICdzZWNvbmRzJyk7XG4gIHZhbGlkYXRlUmFuZ2UoJ2RlYWQgbGV0dGVyIHRhcmdldCBtYXhpbXVtIHJlY2VpdmUgY291bnQnLCBwcm9wcy5kZWFkTGV0dGVyUXVldWUgJiYgcHJvcHMuZGVhZExldHRlclF1ZXVlLm1heFJlY2VpdmVDb3VudCwgMSwgK0luZmluaXR5KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVSYW5nZShsYWJlbDogc3RyaW5nLCB2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkLCBtaW5WYWx1ZTogbnVtYmVyLCBtYXhWYWx1ZTogbnVtYmVyLCB1bml0Pzogc3RyaW5nKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IFRva2VuLmlzVW5yZXNvbHZlZCh2YWx1ZSkpIHsgcmV0dXJuOyB9XG4gIGNvbnN0IHVuaXRTdWZmaXggPSB1bml0ID8gYCAke3VuaXR9YCA6ICcnO1xuICBpZiAodmFsdWUgPCBtaW5WYWx1ZSkgeyB0aHJvdyBuZXcgRXJyb3IoYCR7bGFiZWx9IG11c3QgYmUgJHttaW5WYWx1ZX0ke3VuaXRTdWZmaXh9IG9yIG1vcmUsIGJ1dCAke3ZhbHVlfSB3YXMgcHJvdmlkZWRgKTsgfVxuICBpZiAodmFsdWUgPiBtYXhWYWx1ZSkgeyB0aHJvdyBuZXcgRXJyb3IoYCR7bGFiZWx9IG11c3QgYmUgJHttYXhWYWx1ZX0ke3VuaXRTdWZmaXh9IG9mIGxlc3MsIGJ1dCAke3ZhbHVlfSB3YXMgcHJvdmlkZWRgKTsgfVxufVxuIl19