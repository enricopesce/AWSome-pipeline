"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const core_1 = require("@aws-cdk/core");
const iam = require("../lib");
let stack;
let resource;
beforeEach(() => {
    stack = new core_1.Stack();
    resource = new core_1.CfnResource(stack, 'SomeResource', {
        type: 'CDK::Test::SomeResource',
    });
});
describe('IAM grant', () => {
    test('Grant.drop() returns a no-op grant', () => {
        const user = new iam.User(stack, 'poo');
        const grant = iam.Grant.drop(user, 'dropping me');
        expect(grant.success).toBeFalsy();
        expect(grant.principalStatement).toBeUndefined();
        expect(grant.resourceStatement).toBeUndefined();
    });
});
describe('Grant dependencies', () => {
    test('can depend on grant added to role', () => {
        // GIVEN
        const role = new iam.Role(stack, 'Role', {
            assumedBy: new iam.ServicePrincipal('bla.amazonaws.com'),
        });
        // WHEN
        applyGrantWithDependencyTo(role);
        // THEN
        expectDependencyOn('RoleDefaultPolicy5FFB7DAB');
    });
    test('can depend on grant added to role wrapped with conditions', () => {
        // GIVEN
        const role = new iam.Role(stack, 'Role', {
            assumedBy: new iam.ServicePrincipal('bla.amazonaws.com'),
        });
        // WHEN
        applyGrantWithDependencyTo(new iam.PrincipalWithConditions(role, {
            StringEquals: { 'aws:something': 'happy' },
        }));
        // THEN
        expectDependencyOn('RoleDefaultPolicy5FFB7DAB');
    });
    test('can depend on grant added to lazy role', () => {
        // GIVEN
        const role = new iam.LazyRole(stack, 'Role', {
            assumedBy: new iam.ServicePrincipal('bla.amazonaws.com'),
        });
        // WHEN
        applyGrantWithDependencyTo(role);
        Array.isArray(role.roleArn); // Force instantiation
        // THEN
        expectDependencyOn('RoleDefaultPolicy5FFB7DAB');
    });
    test('can depend on grant added to resource', () => {
        // WHEN
        iam.Grant.addToPrincipalOrResource({
            actions: ['service:DoAThing'],
            grantee: new iam.ServicePrincipal('bla.amazonaws.com'),
            resourceArns: ['*'],
            resource: new FakeResourceWithPolicy(stack, 'Buckaroo'),
        }).applyBefore(resource);
        // THEN
        expectDependencyOn('BuckarooPolicy74174DA4');
    });
    test('can depend on grant added to principal AND resource', () => {
        // GIVEN
        const role = new iam.Role(stack, 'Role', {
            assumedBy: new iam.ServicePrincipal('bla.amazonaws.com'),
        });
        // WHEN
        iam.Grant.addToPrincipalAndResource({
            actions: ['service:DoAThing'],
            grantee: role,
            resourceArns: ['*'],
            resource: new FakeResourceWithPolicy(stack, 'Buckaroo'),
        }).applyBefore(resource);
        // THEN
        expectDependencyOn('RoleDefaultPolicy5FFB7DAB');
        expectDependencyOn('BuckarooPolicy74174DA4');
    });
});
function applyGrantWithDependencyTo(principal) {
    iam.Grant.addToPrincipal({
        actions: ['service:DoAThing'],
        grantee: principal,
        resourceArns: ['*'],
    }).applyBefore(resource);
}
function expectDependencyOn(id) {
    expect(stack).toHaveResource('CDK::Test::SomeResource', (props) => {
        var _a;
        return ((_a = props === null || props === void 0 ? void 0 : props.DependsOn) !== null && _a !== void 0 ? _a : []).includes(id);
    }, assert_1.ResourcePart.CompleteDefinition);
}
class FakeResourceWithPolicy extends core_1.CfnResource {
    constructor(scope, id) {
        super(scope, id, {
            type: 'CDK::Test::Buckaroo',
        });
        this.policy = new core_1.CfnResource(this, 'Policy', {
            type: 'CDK::Test::BuckarooPolicy',
        });
    }
    addToResourcePolicy(_statement) {
        return { statementAdded: true, policyDependable: this.policy };
    }
}
//# sourceMappingURL=data:application/json;base64,