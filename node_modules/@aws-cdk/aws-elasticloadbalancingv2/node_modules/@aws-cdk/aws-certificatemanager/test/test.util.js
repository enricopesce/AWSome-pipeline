"use strict";
const aws_route53_1 = require("@aws-cdk/aws-route53");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
const util_1 = require("../lib/util");
module.exports = {
    'apex domain': {
        'returns right domain'(test) {
            test.equals('domain.com', util_1.apexDomain('domain.com'));
            test.equals('domain.com', util_1.apexDomain('test.domain.com'));
            test.done();
        },
        'understands eTLDs'(test) {
            test.equals('domain.co.uk', util_1.apexDomain('test.domain.co.uk'));
            test.done();
        },
    },
    'isDnsValidatedCertificate': {
        'new DnsValidatedCertificate is a DnsValidatedCertificate'(test) {
            const stack = new core_1.Stack();
            const hostedZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
                zoneName: 'example.com',
            });
            const cert = new lib_1.DnsValidatedCertificate(stack, 'Certificate', {
                domainName: 'test.example.com',
                hostedZone,
            });
            test.ok(util_1.isDnsValidatedCertificate(cert));
            test.done();
        },
        'new Certificate is not a DnsValidatedCertificate'(test) {
            const stack = new core_1.Stack();
            const cert = new lib_1.Certificate(stack, 'Certificate', {
                domainName: 'test.example.com',
            });
            test.ok(!util_1.isDnsValidatedCertificate(cert));
            test.done();
        },
        'fromCertificateArn is not a DnsValidatedCertificate'(test) {
            const stack = new core_1.Stack();
            const cert = lib_1.Certificate.fromCertificateArn(stack, 'Certificate', 'cert-arn');
            test.ok(!util_1.isDnsValidatedCertificate(cert));
            test.done();
        },
    },
    'getCertificateRegion': {
        'from stack'(test) {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'RegionStack', { env: { region: 'eu-west-1' } });
            const certificate = new lib_1.Certificate(stack, 'TestCertificate', {
                domainName: 'www.example.com',
            });
            test.equals(util_1.getCertificateRegion(certificate), 'eu-west-1');
            test.done();
        },
        'from DnsValidatedCertificate region'(test) {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'RegionStack', { env: { region: 'eu-west-1' } });
            const hostedZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
                zoneName: 'example.com',
            });
            const certificate = new lib_1.DnsValidatedCertificate(stack, 'TestCertificate', {
                domainName: 'www.example.com',
                hostedZone,
                region: 'eu-west-3',
            });
            test.equals(util_1.getCertificateRegion(certificate), 'eu-west-3');
            test.done();
        },
        'fromCertificateArn'(test) {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'RegionStack', { env: { region: 'eu-west-1' } });
            const certificate = lib_1.Certificate.fromCertificateArn(stack, 'TestCertificate', 'arn:aws:acm:us-east-2:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d');
            test.equals(util_1.getCertificateRegion(certificate), 'us-east-2');
            test.done();
        },
        'region agnostic stack'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            const certificate = new lib_1.Certificate(stack, 'TestCertificate', {
                domainName: 'www.example.com',
            });
            test.equals(util_1.getCertificateRegion(certificate), '${Token[AWS::Region.4]}');
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,