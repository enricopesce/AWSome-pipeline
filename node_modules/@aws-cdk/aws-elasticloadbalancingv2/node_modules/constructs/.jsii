{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "description": "A programming model for composable configuration",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/constructs",
  "jsiiVersion": "1.4.1 (build 0b09d7b)",
  "keywords": [
    "aws",
    "constructs",
    "cdk",
    "jsii"
  ],
  "license": "Apache-2.0",
  "name": "constructs",
  "readme": {
    "markdown": "# Constructs Programming Model\n\n> Define composable configuration models through code\n\n![Release](https://github.com/awslabs/constructs/workflows/Release/badge.svg)\n[![npm version](https://badge.fury.io/js/constructs.svg)](https://badge.fury.io/js/constructs)\n[![PyPI version](https://badge.fury.io/py/constructs.svg)](https://badge.fury.io/py/constructs)\n[![NuGet version](https://badge.fury.io/nu/Constructs.svg)](https://badge.fury.io/nu/Constructs)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/software.constructs/constructs/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/software.constructs/constructs)\n\n## Contributing\n\nThis project has adopted the [Amazon Open Source Code of\nConduct](https://aws.github.io/code-of-conduct).\n\nWe welcome community contributions and pull requests. See our [contribution\nguide](./CONTRIBUTING.md) for more information on how to report issues, set up a\ndevelopment environment and submit code.\n\n## License\n\nThis project is distributed under the [Apache License, Version 2.0](./LICENSE).\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/aws/constructs.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "namespace": "Constructs",
      "packageId": "Constructs"
    },
    "java": {
      "maven": {
        "artifactId": "constructs",
        "groupId": "software.constructs"
      },
      "package": "software.constructs"
    },
    "js": {
      "npm": "constructs"
    },
    "python": {
      "distName": "constructs",
      "module": "constructs"
    }
  },
  "types": {
    "constructs.Construct": {
      "assembly": "constructs",
      "docs": {
        "remarks": "All constructs besides the root construct must be created within the scope of\nanother construct.",
        "stability": "stable",
        "summary": "Represents the building block of the construct graph."
      },
      "fqn": "constructs.Construct",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Creates a new construct node."
        },
        "parameters": [
          {
            "docs": {
              "summary": "The scope in which to define this construct."
            },
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "docs": {
              "remarks": "Must be unique amongst siblings. If\nthe ID includes a path separator (`/`), then it will be replaced by double\ndash `--`.",
              "summary": "The scoped construct ID."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "Options."
            },
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "constructs.ConstructOptions"
            }
          }
        ]
      },
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 514
      },
      "methods": [
        {
          "docs": {
            "remarks": "This method can be implemented by derived constructs in order to perform\nfinal changes before synthesis. prepare() will be called after child\nconstructs have been prepared.\n\nThis is an advanced framework feature. Only use this if you\nunderstand the implications.",
            "stability": "stable",
            "summary": "Perform final modifications before synthesis."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 568
          },
          "name": "onPrepare",
          "protected": true
        },
        {
          "docs": {
            "remarks": "This method is usually implemented by framework-level constructs such as `Stack` and `Asset`\nas they participate in synthesizing the cloud assembly.",
            "stability": "stable",
            "summary": "Allows this construct to emit artifacts into the cloud assembly during synthesis."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 580
          },
          "name": "onSynthesize",
          "parameters": [
            {
              "docs": {
                "summary": "The synthesis session."
              },
              "name": "session",
              "type": {
                "fqn": "constructs.ISynthesisSession"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "remarks": "This method can be implemented by derived constructs in order to perform\nvalidation logic. It is called on all constructs before synthesis.",
            "returns": "An array of validation error messages, or an empty array if there the construct is valid.",
            "stability": "stable",
            "summary": "Validate the current construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 554
          },
          "name": "onValidate",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns a string representation of this construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 542
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Construct"
    },
    "constructs.ConstructMetadata": {
      "assembly": "constructs",
      "docs": {
        "stability": "stable",
        "summary": "Metadata keys used by constructs."
      },
      "fqn": "constructs.ConstructMetadata",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/metadata.ts",
        "line": 27
      },
      "name": "ConstructMetadata",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "If set in the construct's context, omits stack traces from metadata entries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metadata.ts",
            "line": 31
          },
          "name": "DISABLE_STACK_TRACE_IN_METADATA",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "Context type for error level messages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metadata.ts",
            "line": 46
          },
          "name": "ERROR_METADATA_KEY",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "Context type for info level messages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metadata.ts",
            "line": 36
          },
          "name": "INFO_METADATA_KEY",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "Context type for warning level messages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metadata.ts",
            "line": 41
          },
          "name": "WARNING_METADATA_KEY",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "constructs.ConstructOptions": {
      "assembly": "constructs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for creating constructs."
      },
      "fqn": "constructs.ConstructOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 686
      },
      "name": "ConstructOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- the default `Node` is associated",
            "stability": "stable",
            "summary": "A factory for attaching `Node`s to the construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 691
          },
          "name": "nodeFactory",
          "optional": true,
          "type": {
            "fqn": "constructs.INodeFactory"
          }
        }
      ]
    },
    "constructs.ConstructOrder": {
      "assembly": "constructs",
      "docs": {
        "stability": "stable",
        "summary": "In what order to return constructs."
      },
      "fqn": "constructs.ConstructOrder",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 603
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Depth-first, pre-order."
          },
          "name": "PREORDER"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Depth-first, post-order (leaf nodes first)."
          },
          "name": "POSTORDER"
        }
      ],
      "name": "ConstructOrder"
    },
    "constructs.Dependency": {
      "assembly": "constructs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "A single dependency."
      },
      "fqn": "constructs.Dependency",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 618
      },
      "name": "Dependency",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Source the dependency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 622
          },
          "name": "source",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Target of the dependency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 627
          },
          "name": "target",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        }
      ]
    },
    "constructs.IAspect": {
      "assembly": "constructs",
      "docs": {
        "stability": "stable",
        "summary": "Represents an Aspect."
      },
      "fqn": "constructs.IAspect",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/aspect.ts",
        "line": 6
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "All aspects can visit an IConstruct."
          },
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 10
          },
          "name": "visit",
          "parameters": [
            {
              "name": "node",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ]
        }
      ],
      "name": "IAspect"
    },
    "constructs.IConstruct": {
      "assembly": "constructs",
      "docs": {
        "stability": "stable",
        "summary": "Represents a construct."
      },
      "fqn": "constructs.IConstruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 12
      },
      "name": "IConstruct"
    },
    "constructs.INodeFactory": {
      "assembly": "constructs",
      "docs": {
        "stability": "stable",
        "summary": "A factory for attaching `Node`s to the construct."
      },
      "fqn": "constructs.INodeFactory",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 697
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Returns a new `Node` associated with `host`."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 704
          },
          "name": "createNode",
          "parameters": [
            {
              "docs": {
                "summary": "the associated construct."
              },
              "name": "host",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "the construct's scope (parent)."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            },
            {
              "docs": {
                "summary": "the construct id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "constructs.Node"
            }
          }
        }
      ],
      "name": "INodeFactory"
    },
    "constructs.ISynthesisSession": {
      "assembly": "constructs",
      "docs": {
        "remarks": "Passed into `construct.onSynthesize()` methods.",
        "stability": "stable",
        "summary": "Represents a single session of synthesis."
      },
      "fqn": "constructs.ISynthesisSession",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 633
      },
      "name": "ISynthesisSession",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The output directory for this synthesis session."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 637
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "constructs.MetadataEntry": {
      "assembly": "constructs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "An entry in the construct metadata table."
      },
      "fqn": "constructs.MetadataEntry",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/metadata.ts",
        "line": 4
      },
      "name": "MetadataEntry",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metadata.ts",
            "line": 13
          },
          "name": "data",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The metadata entry type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metadata.ts",
            "line": 8
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no trace information",
            "remarks": "Can be omitted by setting the context key\n`ConstructMetadata.DISABLE_STACK_TRACE_IN_METADATA` to 1.",
            "stability": "stable",
            "summary": "Stack trace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/metadata.ts",
            "line": 21
          },
          "name": "trace",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "constructs.Node": {
      "assembly": "constructs",
      "docs": {
        "stability": "stable",
        "summary": "Represents the construct node in the scope tree."
      },
      "fqn": "constructs.Node",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "parameters": [
          {
            "name": "host",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.IConstruct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the node associated with a construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 27
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "the construct."
              },
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "constructs.Node"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "All constructs in the dependency's scope will be deployed before any\nconstruct in this construct's scope.",
            "stability": "stable",
            "summary": "Add an ordering dependency on another Construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 336
          },
          "name": "addDependency",
          "parameters": [
            {
              "name": "dependencies",
              "type": {
                "fqn": "constructs.IConstruct"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "The toolkit will fail synthesis when errors are reported.",
            "stability": "stable",
            "summary": "Adds an { \"error\": <message> } metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 275
          },
          "name": "addError",
          "parameters": [
            {
              "docs": {
                "summary": "The error message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The toolkit will display the info message when apps are synthesized.",
            "stability": "stable",
            "summary": "Adds a { \"info\": <message> } metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 256
          },
          "name": "addInfo",
          "parameters": [
            {
              "docs": {
                "summary": "The info message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Entries are arbitrary values and will also include a stack trace to allow tracing back to\nthe code location for when the entry was added. It can be used, for example, to include source\nmapping in CloudFormation templates to improve diagnostics.",
            "stability": "stable",
            "summary": "Adds a metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 239
          },
          "name": "addMetadata",
          "parameters": [
            {
              "docs": {
                "summary": "a string denoting the type of metadata."
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "If null/undefined, metadata will not be added.",
                "summary": "the value of the metadata (can be a Token)."
              },
              "name": "data",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)."
              },
              "name": "fromFunction",
              "optional": true,
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The toolkit will display the warning when an app is synthesized, or fail\nif run in --strict mode.",
            "stability": "stable",
            "summary": "Adds a { \"warning\": <message> } metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 266
          },
          "name": "addWarning",
          "parameters": [
            {
              "docs": {
                "summary": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Applies the aspect to this Constructs node."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 282
          },
          "name": "applyAspect",
          "parameters": [
            {
              "name": "aspect",
              "type": {
                "fqn": "constructs.IAspect"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return this construct and all of its children in the given order."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 171
          },
          "name": "findAll",
          "parameters": [
            {
              "name": "order",
              "optional": true,
              "type": {
                "fqn": "constructs.ConstructOrder"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "constructs.IConstruct"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "remarks": "Throws an error if the child is not found.",
            "returns": "Child with the given id.",
            "stability": "stable",
            "summary": "Return a direct child by id."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 117
          },
          "name": "findChild",
          "parameters": [
            {
              "docs": {
                "summary": "Identifier of direct child."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "constructs.IConstruct"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Invokes \"prepare\" on all constructs (depth-first, post-order) in the tree under `node`."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 417
          },
          "name": "prepare"
        },
        {
          "docs": {
            "remarks": "Context must be set before any children are added, since children may consult context info during construction.\nIf the key already exists, it will be overridden.",
            "stability": "stable",
            "summary": "This can be used to set contextual values."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 198
          },
          "name": "setContext",
          "parameters": [
            {
              "docs": {
                "summary": "The context key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The context value."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Synthesizes a CloudAssembly from a construct tree."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 382
          },
          "name": "synthesize",
          "parameters": [
            {
              "docs": {
                "summary": "Synthesis options."
              },
              "name": "options",
              "type": {
                "fqn": "constructs.SynthesisOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "returns": "the child if found, or undefined",
            "stability": "stable",
            "summary": "Return a direct child by id, or undefined."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 105
          },
          "name": "tryFindChild",
          "parameters": [
            {
              "docs": {
                "summary": "Identifier of direct child."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "constructs.IConstruct"
            }
          }
        },
        {
          "docs": {
            "remarks": "Context is usually initialized at the root, but can be overridden at any point in the tree.",
            "returns": "The context value or `undefined` if there is no context value for thie key.",
            "stability": "stable",
            "summary": "Retrieves a value from tree context."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 214
          },
          "name": "tryGetContext",
          "parameters": [
            {
              "docs": {
                "summary": "The context key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "returns": "Whether a child with the given name was deleted.",
            "stability": "experimental",
            "summary": "Remove the child with the given name, if present."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 372
          },
          "name": "tryRemoveChild",
          "parameters": [
            {
              "name": "childName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "An empty list indicates that there are no errors.",
            "stability": "stable",
            "summary": "Invokes \"validate\" on all constructs in the tree (depth-first, pre-order) and returns the list of all errors."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 438
          },
          "name": "validate",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "constructs.ValidationError"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Node",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "Separator used to delimit construct path components."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 21
          },
          "name": "PATH_SEP",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "All direct children of this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 164
          },
          "name": "children",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return all dependencies registered on this node or any of its children."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 345
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.Dependency"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "This is a a scope-unique id. To obtain an app-unique id for this construct, use `uniqueId`.",
            "stability": "stable",
            "summary": "The id of this construct within the current scope."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 48
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns true if this construct or the scopes in which it is defined are locked."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 318
          },
          "name": "locked",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "This can be used, for example, to implement support for deprecation notices, source mapping, etc.",
            "stability": "stable",
            "summary": "An immutable array of metadata objects associated with this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 225
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.MetadataEntry"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Components are separated by '/'.",
            "stability": "stable",
            "summary": "The full, absolute path of this construct in the tree."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 85
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "returns": "The root of the construct tree.",
            "stability": "stable",
            "summary": "Returns the root of the construct tree."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 310
          },
          "name": "root",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "docs": {
            "returns": "a list of parent scopes. The last element in the list will always\nbe the current construct and the first element will be the root of the\ntree.",
            "stability": "stable",
            "summary": "All parent scopes of this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 294
          },
          "name": "scopes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Includes all components of the tree.",
            "stability": "stable",
            "summary": "A tree-global unique alphanumeric identifier for this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 94
          },
          "name": "uniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "The value is `undefined` at the root of the construct scope tree.",
            "stability": "stable",
            "summary": "Returns the scope in which this construct is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 41
          },
          "name": "scope",
          "optional": true,
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "docs": {
            "custom": {
              "throws": "if there is more than one child"
            },
            "remarks": "This is usually the construct that provides the bulk of the underlying functionality.\nUseful for modifications of the underlying construct that are not available at the higher levels.\nOverride the defaultChild property.\n\nThis should only be used in the cases where the correct\ndefault child is not named 'Resource' or 'Default' as it\nshould be.\n\nIf you set this to undefined, the default behavior of finding\nthe child named 'Resource' or 'Default' will be used.",
            "returns": "a construct or undefined if there is no default child",
            "stability": "stable",
            "summary": "Returns the child construct that has the id `Default` or `Resource\"`."
          },
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 133
          },
          "name": "defaultChild",
          "optional": true,
          "type": {
            "fqn": "constructs.IConstruct"
          }
        }
      ]
    },
    "constructs.SynthesisOptions": {
      "assembly": "constructs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for synthesis."
      },
      "fqn": "constructs.SynthesisOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 648
      },
      "name": "SynthesisOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- creates a temporary directory",
            "stability": "stable",
            "summary": "The output directory into which to synthesize the cloud assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 653
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional context is passed to `onSynthesize`",
            "stability": "stable",
            "summary": "Additional context passed into the synthesis session object when `construct.synth` is called."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 665
          },
          "name": "sessionContext",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether synthesis should skip the validation phase."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 659
          },
          "name": "skipValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "constructs.ValidationError": {
      "assembly": "constructs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "An error returned during the validation phase."
      },
      "fqn": "constructs.ValidationError",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/construct.ts",
        "line": 588
      },
      "name": "ValidationError",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The error message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 597
          },
          "name": "message",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The construct which emitted the error."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/construct.ts",
            "line": 592
          },
          "name": "source",
          "type": {
            "fqn": "constructs.Construct"
          }
        }
      ]
    }
  },
  "version": "3.0.3",
  "fingerprint": "71jdnwElmMZyaW1Gtqj4FNvlP43MzuT6Fxaam/mDm88="
}
