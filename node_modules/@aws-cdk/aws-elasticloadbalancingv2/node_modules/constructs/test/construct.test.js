"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const util_1 = require("./util");
// tslint:disable:variable-name
// tslint:disable:max-line-length
test('the "Root" construct is a special construct which can be used as the root of the tree', () => {
    const root = new util_1.App();
    const node = lib_1.Node.of(root);
    expect(node.id).toBe('');
    expect(node.scope).toBeUndefined();
    expect(node.children.length).toBe(0);
});
test('constructs cannot be created with an empty name unless they are root', () => {
    const root = new util_1.App();
    expect(() => new lib_1.Construct(root, '')).toThrow(/Only root constructs may have an empty name/);
});
test('construct.name returns the name of the construct', () => {
    const t = createTree();
    expect(lib_1.Node.of(t.child1).id).toBe('Child1');
    expect(lib_1.Node.of(t.child2).id).toBe('Child2');
    expect(lib_1.Node.of(t.child1_1).id).toBe('Child11');
    expect(lib_1.Node.of(t.child1_2).id).toBe('Child12');
    expect(lib_1.Node.of(t.child1_1_1).id).toBe('Child111');
    expect(lib_1.Node.of(t.child2_1).id).toBe('Child21');
});
test('construct id can use any character except the path separator', () => {
    const root = new util_1.App();
    expect(() => new lib_1.Construct(root, 'valid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'ValiD')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'Va123lid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'v')).not.toThrow();
    expect(() => new lib_1.Construct(root, '  invalid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'invalid   ')).not.toThrow();
    expect(() => new lib_1.Construct(root, '123invalid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'in valid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'in_Valid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'in-Valid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'in\\Valid')).not.toThrow();
    expect(() => new lib_1.Construct(root, 'in.Valid')).not.toThrow();
});
test('if construct id contains path seperators, they will be replaced by double-dash', () => {
    const root = new util_1.App();
    const c = new lib_1.Construct(root, 'Boom/Boom/Bam');
    expect(lib_1.Node.of(c).id).toBe('Boom--Boom--Bam');
});
test('if "undefined" is forcefully used as an "id", it will be treated as an empty string', () => {
    const c = new lib_1.Construct(undefined, undefined);
    expect(lib_1.Node.of(c).id).toBe('');
});
test('construct.uniqueId returns a tree-unique alphanumeric id of this construct', () => {
    const root = new util_1.App();
    const child1 = new lib_1.Construct(root, 'This is the first child');
    const child2 = new lib_1.Construct(child1, 'Second level');
    const c1 = new lib_1.Construct(child2, 'My construct');
    const c2 = new lib_1.Construct(child1, 'My construct');
    expect(lib_1.Node.of(c1).path).toBe('This is the first child/Second level/My construct');
    expect(lib_1.Node.of(c2).path).toBe('This is the first child/My construct');
    expect(lib_1.Node.of(c1).uniqueId).toBe('ThisisthefirstchildSecondlevelMyconstruct202131E0');
    expect(lib_1.Node.of(c2).uniqueId).toBe('ThisisthefirstchildMyconstruct8C288DF9');
});
test('cannot calculate uniqueId if the construct path is ["Default"]', () => {
    const root = new util_1.App();
    const c = new lib_1.Construct(root, 'Default');
    expect(() => lib_1.Node.of(c).uniqueId).toThrow(/Unable to calculate a unique id for an empty set of components/);
});
test('construct.getChildren() returns an array of all children', () => {
    const root = new util_1.App();
    const child = new lib_1.Construct(root, 'Child1');
    new lib_1.Construct(root, 'Child2');
    expect(lib_1.Node.of(child).children.length).toBe(0);
    expect(lib_1.Node.of(root).children.length).toBe(2);
});
test('construct.findChild(name) can be used to retrieve a child from a parent', () => {
    const root = new util_1.App();
    const child = new lib_1.Construct(root, 'Contruct');
    expect(lib_1.Node.of(root).tryFindChild(lib_1.Node.of(child).id)).toBe(child);
    expect(lib_1.Node.of(root).tryFindChild('NotFound')).toBeUndefined();
});
test('construct.getChild(name) can be used to retrieve a child from a parent', () => {
    const root = new util_1.App();
    const child = new lib_1.Construct(root, 'Contruct');
    expect(lib_1.Node.of(root).findChild(lib_1.Node.of(child).id)).toBe(child);
    expect(() => lib_1.Node.of(root).findChild('NotFound')).toThrow(/No child with id: 'NotFound'/);
});
test('construct.getContext(key) can be used to read a value from context defined at the root level', () => {
    const context = {
        ctx1: 12,
        ctx2: 'hello'
    };
    const t = createTree(context);
    expect(lib_1.Node.of(t.child1_2).tryGetContext('ctx1')).toBe(12);
    expect(lib_1.Node.of(t.child1_1_1).tryGetContext('ctx2')).toBe('hello');
});
// tslint:disable-next-line:max-line-length
test('construct.setContext(k,v) sets context at some level and construct.getContext(key) will return the lowermost value defined in the stack', () => {
    const root = new util_1.App();
    const highChild = new lib_1.Construct(root, 'highChild');
    lib_1.Node.of(highChild).setContext('c1', 'root');
    lib_1.Node.of(highChild).setContext('c2', 'root');
    const child1 = new lib_1.Construct(highChild, 'child1');
    lib_1.Node.of(child1).setContext('c2', 'child1');
    lib_1.Node.of(child1).setContext('c3', 'child1');
    const child2 = new lib_1.Construct(highChild, 'child2');
    const child3 = new lib_1.Construct(child1, 'child1child1');
    lib_1.Node.of(child3).setContext('c1', 'child3');
    lib_1.Node.of(child3).setContext('c4', 'child3');
    expect(lib_1.Node.of(highChild).tryGetContext('c1')).toBe('root');
    expect(lib_1.Node.of(highChild).tryGetContext('c2')).toBe('root');
    expect(lib_1.Node.of(highChild).tryGetContext('c3')).toBeUndefined();
    expect(lib_1.Node.of(child1).tryGetContext('c1')).toBe('root');
    expect(lib_1.Node.of(child1).tryGetContext('c2')).toBe('child1');
    expect(lib_1.Node.of(child1).tryGetContext('c3')).toBe('child1');
    expect(lib_1.Node.of(child2).tryGetContext('c1')).toBe('root');
    expect(lib_1.Node.of(child2).tryGetContext('c2')).toBe('root');
    expect(lib_1.Node.of(child2).tryGetContext('c3')).toBeUndefined();
    expect(lib_1.Node.of(child3).tryGetContext('c1')).toBe('child3');
    expect(lib_1.Node.of(child3).tryGetContext('c2')).toBe('child1');
    expect(lib_1.Node.of(child3).tryGetContext('c3')).toBe('child1');
    expect(lib_1.Node.of(child3).tryGetContext('c4')).toBe('child3');
});
test('construct.setContext(key, value) can only be called before adding any children', () => {
    const root = new util_1.App();
    new lib_1.Construct(root, 'child1');
    expect(() => lib_1.Node.of(root).setContext('k', 'v')).toThrow(/Cannot set context after children have been added: child1/);
});
test('construct.pathParts returns an array of strings of all names from root to node', () => {
    const tree = createTree();
    expect(lib_1.Node.of(tree.root).path).toBe('');
    expect(lib_1.Node.of(tree.child1_1_1).path).toBe('HighChild/Child1/Child11/Child111');
    expect(lib_1.Node.of(tree.child2).path).toBe('HighChild/Child2');
});
test('if a root construct has a name, it should be included in the path', () => {
    const tree = createTree({});
    expect(lib_1.Node.of(tree.root).path).toBe('');
    expect(lib_1.Node.of(tree.child1_1_1).path).toBe('HighChild/Child1/Child11/Child111');
});
test('construct can not be created with the name of a sibling', () => {
    const root = new util_1.App();
    // WHEN
    new lib_1.Construct(root, 'SameName');
    // THEN: They have different paths
    expect(() => new lib_1.Construct(root, 'SameName')).toThrow(/There is already a Construct with name 'SameName' in App/);
    // WHEN
    const c0 = new lib_1.Construct(root, 'c0');
    new lib_1.Construct(c0, 'SameName');
    // THEN: They have different paths
    expect(() => new lib_1.Construct(c0, 'SameName')).toThrow(/There is already a Construct with name 'SameName' in Construct \[c0\]/);
});
test('addMetadata(type, data) can be used to attach metadata to constructs', () => {
    var _a;
    const root = new util_1.App();
    const con = new lib_1.Construct(root, 'MyConstruct');
    expect(lib_1.Node.of(con).metadata).toEqual([]);
    const node = lib_1.Node.of(con);
    (function FIND_ME() {
        node.addMetadata('key', 'value');
        node.addMetadata('number', 103);
        node.addMetadata('array', [123, 456]);
    })();
    expect(node.metadata[0].type).toBe('key');
    expect(node.metadata[0].data).toBe('value');
    expect(node.metadata[1].data).toBe(103);
    expect(node.metadata[2].data).toEqual([123, 456]);
    expect((_a = node.metadata[0].trace) === null || _a === void 0 ? void 0 : _a[0]).toContain('FIND_ME');
});
test('addMetadata(type, undefined/null) is ignored', () => {
    const root = new util_1.App();
    const con = new lib_1.Construct(root, 'Foo');
    const node = lib_1.Node.of(con);
    node.addMetadata('Null', null);
    node.addMetadata('Undefined', undefined);
    node.addMetadata('True', true);
    node.addMetadata('False', false);
    node.addMetadata('Empty', '');
    const exists = (key) => node.metadata.find(x => x.type === key);
    expect(exists('Null')).toBeFalsy();
    expect(exists('Undefined')).toBeFalsy();
    expect(exists('True')).toBeTruthy();
    expect(exists('False')).toBeTruthy();
    expect(exists('Empty')).toBeTruthy();
});
test('addWarning(message) can be used to add a "WARNING" message entry to the construct', () => {
    var _a;
    const root = new util_1.App();
    const con = new lib_1.Construct(root, 'MyConstruct');
    const node = lib_1.Node.of(con);
    node.addWarning('This construct is deprecated, use the other one instead');
    expect(node.metadata[0].type).toBe(lib_1.ConstructMetadata.WARNING_METADATA_KEY);
    expect(node.metadata[0].data).toBe('This construct is deprecated, use the other one instead');
    expect((_a = node.metadata[0].trace) === null || _a === void 0 ? void 0 : _a.length).toBeGreaterThan(0);
});
test('addError(message) can be used to add a "ERROR" message entry to the construct', () => {
    var _a;
    const root = new util_1.App();
    const con = new lib_1.Construct(root, 'MyConstruct');
    const node = lib_1.Node.of(con);
    node.addError('Stop!');
    expect(node.metadata[0].type).toBe(lib_1.ConstructMetadata.ERROR_METADATA_KEY);
    expect(node.metadata[0].data).toBe('Stop!');
    expect((_a = node.metadata[0].trace) === null || _a === void 0 ? void 0 : _a.length).toBeGreaterThan(0);
});
test('addInfo(message) can be used to add an "INFO" message entry to the construct', () => {
    var _a;
    const root = new util_1.App();
    const con = new lib_1.Construct(root, 'MyConstruct');
    const node = lib_1.Node.of(con);
    node.addInfo('Hey there, how do you do?');
    expect(node.metadata[0].type).toBe(lib_1.ConstructMetadata.INFO_METADATA_KEY);
    expect(node.metadata[0].data).toBe('Hey there, how do you do?');
    expect((_a = node.metadata[0].trace) === null || _a === void 0 ? void 0 : _a.length).toBeGreaterThan(0);
});
test('multiple children of the same type, with explicit names are welcome', () => {
    const root = new util_1.App();
    new MyBeautifulConstruct(root, 'mbc1');
    new MyBeautifulConstruct(root, 'mbc2');
    new MyBeautifulConstruct(root, 'mbc3');
    new MyBeautifulConstruct(root, 'mbc4');
    expect(lib_1.Node.of(root).children.length).toBeGreaterThanOrEqual(4);
});
// tslint:disable-next-line:max-line-length
test('construct.onValidate() can be implemented to perform validation, node.validate() will return all errors from the subtree (DFS)', () => {
    class MyConstruct extends lib_1.Construct {
        onValidate() {
            return ['my-error1', 'my-error2'];
        }
    }
    class YourConstruct extends lib_1.Construct {
        onValidate() {
            return ['your-error1'];
        }
    }
    class TheirConstruct extends lib_1.Construct {
        constructor(scope, id) {
            super(scope, id);
            new YourConstruct(this, 'YourConstruct');
        }
        onValidate() {
            return ['their-error'];
        }
    }
    class TestStack extends util_1.App {
        constructor() {
            super();
            new MyConstruct(this, 'MyConstruct');
            new TheirConstruct(this, 'TheirConstruct');
        }
        onValidate() {
            return ['stack-error'];
        }
    }
    const stack = new TestStack();
    const errors = lib_1.Node.of(stack).validate()
        .map((v) => ({ path: lib_1.Node.of(v.source).path, message: v.message }));
    // validate DFS
    expect(errors).toEqual([
        { path: 'MyConstruct', message: 'my-error1' },
        { path: 'MyConstruct', message: 'my-error2' },
        { path: 'TheirConstruct/YourConstruct', message: 'your-error1' },
        { path: 'TheirConstruct', message: 'their-error' },
        { path: '', message: 'stack-error' }
    ]);
});
test('construct.lock() protects against adding children anywhere under this construct (direct or indirect)', () => {
    class LockableConstruct extends lib_1.Construct {
        lockMe() {
            lib_1.Node.of(this)._lock();
        }
        unlockMe() {
            lib_1.Node.of(this)._unlock();
        }
    }
    const stack = new util_1.App();
    const c0a = new LockableConstruct(stack, 'c0a');
    const c0b = new lib_1.Construct(stack, 'c0b');
    const c1a = new lib_1.Construct(c0a, 'c1a');
    const c1b = new lib_1.Construct(c0a, 'c1b');
    c0a.lockMe();
    // now we should still be able to add children to c0b, but not to c0a or any its children
    new lib_1.Construct(c0b, 'c1a');
    expect(() => new lib_1.Construct(c0a, 'fail1')).toThrow(/Cannot add children to "c0a" during synthesis/);
    expect(() => new lib_1.Construct(c1a, 'fail2')).toThrow(/Cannot add children to "c0a\/c1a" during synthesis/);
    expect(() => new lib_1.Construct(c1b, 'fail3')).toThrow(/Cannot add children to "c0a\/c1b" during synthesis/);
    c0a.unlockMe();
    new lib_1.Construct(c0a, 'c0aZ');
    new lib_1.Construct(c1a, 'c1aZ');
    new lib_1.Construct(c1b, 'c1bZ');
});
test('findAll returns a list of all children in either DFS or BFS', () => {
    // GIVEN
    const c1 = new lib_1.Construct(undefined, '1');
    const c2 = new lib_1.Construct(c1, '2');
    new lib_1.Construct(c1, '3');
    new lib_1.Construct(c2, '4');
    new lib_1.Construct(c2, '5');
    // THEN
    const node = lib_1.Node.of(c1);
    expect(node.findAll().map(x => lib_1.Node.of(x).id)).toEqual(lib_1.Node.of(c1).findAll(lib_1.ConstructOrder.PREORDER).map(x => lib_1.Node.of(x).id)); // default is PreOrder
    expect(node.findAll(lib_1.ConstructOrder.PREORDER).map(x => lib_1.Node.of(x).id)).toEqual(['1', '2', '4', '5', '3']);
    expect(node.findAll(lib_1.ConstructOrder.POSTORDER).map(x => lib_1.Node.of(x).id)).toEqual(['4', '5', '2', '3', '1']);
});
test('ancestors returns a list of parents up to root', () => {
    const { child1_1_1 } = createTree();
    expect(lib_1.Node.of(child1_1_1).scopes.map(x => lib_1.Node.of(x).id)).toEqual(['', 'HighChild', 'Child1', 'Child11', 'Child111']);
});
test('"root" returns the root construct', () => {
    const { child1, child2, child1_1_1, root } = createTree();
    expect(lib_1.Node.of(child1).root).toBe(root);
    expect(lib_1.Node.of(child2).root).toBe(root);
    expect(lib_1.Node.of(child1_1_1).root).toBe(root);
});
describe('defaultChild', () => {
    test('returns the child with id "Resource"', () => {
        const root = new util_1.App();
        new lib_1.Construct(root, 'child1');
        const defaultChild = new lib_1.Construct(root, 'Resource');
        new lib_1.Construct(root, 'child2');
        expect(lib_1.Node.of(root).defaultChild).toBe(defaultChild);
    });
    test('returns the child with id "Default"', () => {
        const root = new util_1.App();
        new lib_1.Construct(root, 'child1');
        const defaultChild = new lib_1.Construct(root, 'Default');
        new lib_1.Construct(root, 'child2');
        expect(lib_1.Node.of(root).defaultChild).toBe(defaultChild);
    });
    test('can override defaultChild', () => {
        const root = new util_1.App();
        new lib_1.Construct(root, 'Resource');
        const defaultChild = new lib_1.Construct(root, 'OtherResource');
        lib_1.Node.of(root).defaultChild = defaultChild;
        expect(lib_1.Node.of(root).defaultChild).toBe(defaultChild);
    });
    test('returns "undefined" if there is no default', () => {
        const root = new util_1.App();
        new lib_1.Construct(root, 'child1');
        new lib_1.Construct(root, 'child2');
        expect(lib_1.Node.of(root).defaultChild).toBeUndefined();
    });
    test('fails if there are both "Resource" and "Default"', () => {
        const root = new util_1.App();
        new lib_1.Construct(root, 'child1');
        new lib_1.Construct(root, 'Default');
        new lib_1.Construct(root, 'child2');
        new lib_1.Construct(root, 'Resource');
        expect(() => lib_1.Node.of(root).defaultChild)
            .toThrow(/Cannot determine default child for . There is both a child with id "Resource" and id "Default"/);
    });
    test('constructs created in an Aspect are prepared', () => {
        const root = new util_1.App();
        const construct = new lib_1.Construct(root, 'Resource');
        lib_1.Node.of(construct).applyAspect(new AddConstructAspect(construct));
        lib_1.Node.of(root).prepare();
        // THEN
        const addedConstruct = lib_1.Node.of(root).findAll(lib_1.ConstructOrder.PREORDER)
            .find(child => lib_1.Node.of(child).id === `AspectAdded-${lib_1.Node.of(construct).id}`);
        expect(addedConstruct.status).toBe('Prepared');
    });
});
describe('construct prepare', () => {
    it('created constructs are prepared', () => {
        const root = new util_1.App();
        const construct01 = new MyAlmostBeautifulConstruct(root, 'Resource01');
        const construct02 = new MyAlmostBeautifulConstruct(root, 'Resource02');
        lib_1.Node.of(root).prepare();
        // THEN
        expect(construct01.status).toEqual('Prepared');
        expect(construct02.status).toEqual('Prepared');
    });
    it('only constructs with onPrepare function are prepared', () => {
        const root = new util_1.App();
        const construct01 = new MyAlmostBeautifulConstruct(root, 'Resource01');
        const construct02 = new MyMissingPrepareConstruct(root, 'Resource02');
        lib_1.Node.of(root).prepare();
        // THEN
        expect(construct01.status).toEqual('Prepared');
        expect(construct02.status).not.toEqual('Prepared');
    });
    it('only constructs with onPrepare function are prepared', () => {
        const root = new util_1.App();
        const construct01 = new MyAlmostBeautifulConstruct(root, 'Resource01');
        // we try to force the error
        construct01.onPrepare = undefined;
        expect(() => lib_1.Node.of(root).prepare())
            .toThrow(/expecting "onPrepare" to be a function/);
    });
});
function createTree(context) {
    const root = new util_1.App();
    const highChild = new lib_1.Construct(root, 'HighChild');
    if (context) {
        Object.keys(context).forEach(key => lib_1.Node.of(highChild).setContext(key, context[key]));
    }
    const child1 = new lib_1.Construct(highChild, 'Child1');
    const child2 = new lib_1.Construct(highChild, 'Child2');
    const child1_1 = new lib_1.Construct(child1, 'Child11');
    const child1_2 = new lib_1.Construct(child1, 'Child12');
    const child1_1_1 = new lib_1.Construct(child1_1, 'Child111');
    const child2_1 = new lib_1.Construct(child2, 'Child21');
    return {
        root, child1, child2, child1_1, child1_2, child1_1_1, child2_1
    };
}
class MyMissingPrepareConstruct extends lib_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.status = 'PrePrepared';
    }
}
class MyBeautifulConstruct extends lib_1.Construct {
    constructor(scope, id) {
        super(scope, id);
    }
}
class MyAlmostBeautifulConstruct extends lib_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.status = 'PrePrepared';
    }
    onPrepare() {
        this.status = 'Prepared';
    }
}
class AddConstructAspect {
    constructor(scope) {
        this.scope = scope;
    }
    visit(node) {
        new MyAlmostBeautifulConstruct(this.scope, `AspectAdded-${lib_1.Node.of(node).id}`);
    }
}
//# sourceMappingURL=data:application/json;base64,